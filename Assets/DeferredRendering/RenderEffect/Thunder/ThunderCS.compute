struct ThunderNode
{
    float2 begin;
    float2 end;
    float radio;
};

#pragma kernel Thunder

RWTexture2D<float> Result;
RWStructuredBuffer<ThunderNode> _ThundersBuffer;
uint _TextureSizes;

[numthreads(81,1,1)]
void Thunder (uint3 id : SV_DispatchThreadID)
{
    ThunderNode node = _ThundersBuffer[id.x];
    node.begin.y += 0.5; node.end.y += 0.5;
    int beginX = node.begin.x * _TextureSizes;
    int beginY = node.begin.y * _TextureSizes;
    int endX = node.end.x * _TextureSizes;
    int endY = node.end.y * _TextureSizes;
    float2 dir = node.end - node.begin;
    int maxCount = max(endX - beginX, endY - beginY);
    dir.xy /= maxCount * 5;     //得出每一步长的长度
    float2 currentPos = node.begin;
    for(int i = 0; i <= maxCount * 5; i++){
        int2 index = int2(currentPos.x * _TextureSizes, currentPos.y * _TextureSizes);
        Result[index] += node.radio * 0.1;
        currentPos += dir;
    }
}
